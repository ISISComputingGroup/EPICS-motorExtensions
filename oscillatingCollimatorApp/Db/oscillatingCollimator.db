# (LET) Radial oscillating collimator

# Start/stop

record(bo, "$(P)$(O):START:SP") {
    field(DESC, "Start the code execution")
    field(FLNK, "$(P)$(O):START:SEQ")
}

record(seq, "$(P)$(O):START:SEQ") {
    field(DO1, "1")
    field(LNK1, "$(P)$(O):AXIS:CMD.PROC")

    field(DO2, "1")
    field(LNK2, "$(P)$(O):DEADBAND.PROC")

    field(DO3, "1")
    field(LNK3, "$(P)$(O):START:CMD.PROC")
    field(DLY3, "3.0")

    field(SELM, "All")
}

record(calcout, "$(P)$(O):DEADBAND") {
    field(DESC, "Large deadband for underlying motor")
    field(CALC, "99999")
    field(OUT, "$(P)$(M).ADEL PP")
}

record(mbbi, "$(P)$(O):AXIS") {
    field(DESC, "Alphabetic representation of motor")
    field(VAL, "$(AXIS)")
    field(PINI, "YES")
    field(ONST, "A")
    field(TWST, "B")
    field(THST, "C")
    field(FRST, "D")
    field(FVST, "E")
}

record(scalcout, "$(P)$(O):AXIS:CMD") {
    field(DESC, "Set axis in GMC")
    field(INAA, "$(P)$(O):AXIS")
    field(BB, "~a=\"")
    field(CC, "\"")
    field(CALC, "BB+AA+CC")
    field(OUT, "$(P)$(D):SEND_STR_CMD PP")
}

record(scalcout, "$(P)$(O):START:CMD") {
    field(DESC, "Galil command to start col program")
    field(INAA, "$(P)$(O):THREAD")
    field(BB, "XQ #HOMER,")
    field(CALC, "BB+AA")
    field(OUT, "$(P)$(D):SEND_STR_CMD PP")
}

record(bo, "$(P)$(O):STOP:SP") {
    field(DESC, "Stop the code execution")
    field(FLNK, "$(P)$(O):STOP:SEQ")
}

record(seq, "$(P)$(O):STOP:SEQ") {
    field(DO1, "0.5")
    field(LNK1, "$(P)$(O):HALT:CMD.PROC")
    field(DLY1, "1")

    field(DO2, "1")
    field(LNK2, "$(P)$(O):STOP:CMD.PROC")
    field(DLY2, "1")

    field(SELM, "All")
}

record(scalcout, "$(P)$(O):HALT:CMD") {
    field(DESC, "Halt the col thread")
    field(INAA, "$(P)$(O):THREAD")
    field(BB, "HX ")
    field(CALC, "BB+AA")
    field(OUT, "$(P)$(D):SEND_STR_CMD PP")
}

record(scalcout, "$(P)$(O):STOP:CMD") {
    field(DESC, "Stop the motor")
    field(BB, "ST")
    field(CALC, "BB")
    field(OUT, "$(P)$(D):SEND_STR_CMD PP")
}

# Motor position

record(calc, "$(P)$(O):POS:_CALC") {
    field(SCAN, ".1 second")
    field(INPA, "$(P)$(M).RBV MS")
    field(INPB, "$(P)$(O):RADIUS CP MS")
    field(CALC, "R2D*ATAN(A/B)")
}

record(ai, "$(P)$(O):POS") {
    field(INP, "$(P)$(O):POS:_CALC CP MS")
    field(DESC, "Current motor position")
    field(PREC, "2")
    field(EGU, "deg")
    info(INTEREST, "MEDIUM")
}

# We want to know if we are oscillating but:
# * It doesn't have an encoder we can read
# * If the thread is stopped the mode from the gmc will not change
# * We can't just look at the MOVN of the motor as it does stop occasionally
# 
# So instead, check that (largest motor position in last 10s) != (smallest motor position in last 10s)
record(calcout, "$(P)$(O):MOVING_CALC") {
    field(DESC, "Calculates if moving")
    field(SCAN, ".1 second")
    field(INPA, "$(P)$(O):MOVING:_STABILITY:LOW")
    field(INPB, "$(P)$(O):MOVING:_STABILITY:HIGH")
    field(CALC, "(B-A)>0.1")  # Tolerance of 0.1 degrees, when collimator moves intentionally it is ~2 deg.
    field(OUT, "$(P)$(O):MOVING PP")
    field(FLNK, "$(P)$(O):LAST:POS")
}

record(compress, "$(P)$(O):MOVING:_STABILITY:BUF") {
    field(INP, "$(P)$(O):POS")
    field(ALG, "Circular Buffer")
    field(SCAN, ".1 second")
    field(NSAM, "100")  # 10s at 10Hz = 100 samples
    field(FLNK, "$(P)$(O):MOVING:_STABILITY:LOW")
}

# Smallest motor position value in the last 10 seconds
record(compress, "$(P)$(O):MOVING:_STABILITY:LOW") {
    field(INP, "$(P)$(O):MOVING:_STABILITY:BUF")
    field(ALG, "N to 1 Low Value")
    field(NSAM, "1")
    field(N, "100")  # Should match NSAM in _STABILITY:BUF
    field(FLNK, "$(P)$(O):MOVING:_STABILITY:HIGH")
}

# Largest motor position value in the last 10 seconds
record(compress, "$(P)$(O):MOVING:_STABILITY:HIGH") {
    field(INP, "$(P)$(O):MOVING:_STABILITY:BUF")
    field(ALG, "N to 1 High Value")
    field(NSAM, "1")
    field(N, "100")  # Should match NSAM in _STABILITY:BUF
}

record(bi, "$(P)$(O):MOVING") {
    field(DESC, "Is the collimator moving")
    field(ZNAM, "Not Moving")
    field(ONAM, "Moving")
    info(INTEREST, "MEDIUM")
}

# Operating mode

record(ai, "$(P)$(O):MODE:_READ") {
    field(SCAN,"1 second")
    field(DTYP,"$(OTYP)")
    field(EGU, "")
    field(INP, "@asyn(Galil,0)USER_VAR mode")
}

record(calc, "$(P)$(O):MODE:_CALC") {
    field(INPA, "$(P)$(O):MODE:_READ CP MS")
    field(INPB, "$(P)$(O):MOVING CP MS")
    field(CALC, "(A=2&&B=0)?3:A")
}

record(mbbi, "$(P)$(O):MODE") {
    field(DESC,"Control mode")
    field(INP, "$(P)$(O):MODE:_CALC CP MS")
    field(ZRST, "Initializing")
    field(ONST, "Homing")
    field(TWST, "Oscillating")
    field(THST, "Stopped")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

# Frequency

record(ao, "$(P)$(O):FREQ:SP") {
    field(DESC, "Operating frequency setpoint")
    field(PREC, "2")
    field(EGU, "Hz")
    field(DRVH, "0.5")
    field(DRVL, "0")
    info(INTEREST, "MEDIUM")
    info(archive, "VAL")
    info(autosaveFields, "VAL")
    field(FLNK, "$(P)$(O):FREQ:SP:_FAN")
}

record(fanout, "$(P)$(O):FREQ:SP:_FAN") {
    field(LNK1, "$(P)$(O):CYCLE:TIME:HALF:SP PP")
    field(LNK2, "$(P)$(O):ANGLE:SP PP")
}

record(ai,"$(P)$(O):TIME") {
    field(DESC,"Time between oscillations")
    field(SCAN,"1 second")
    field(EGU, "ms")
    field(DTYP,"$(OTYP)")
    field(INP, "@asyn(Galil,0)USER_VAR time")
    info(INTEREST, "MEDIUM")
    info(archive, "VAL")
}

record(calcout, "$(P)$(O):FREQ:_CALC") {
    field(PREC, "2")
    field(EGU, "Hz")
    field(INPA, "$(P)$(O):TIME CP MS")
    field(CALC, "A==0?0:1000/A")
    field(OUT, "$(P)$(O):FREQ PP")
}

record(ai, "$(P)$(O):FREQ") {
    field(DESC, "Operating frequency")
    field(PREC, "2")
    field(EGU, "Hz")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

# Cycle

record(ai,"$(P)$(O):CYCLE") {
    field(DESC,"Motor count")
    field(SCAN,"1 second")
    field(DTYP,"$(OTYP)")
    field(INP, "@asyn(Galil,0)USER_VAR count")
    field(EGU, "")
    field(PREC, "0")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

# Mounting radius is the distance between the pivot and the encoder on the collimator

record(ai,"$(P)$(O):RADIUS") {
    field(DESC, "Mounting radius")
    field(VAL, "$(RADIUS)")
    field(PINI, "YES")
    field(EGU, "mm")
    field(PREC, "2")
    info(INTEREST, "LOW")
    info(archive, "VAL")
}

# Motor steps

record(calcout, "$(P)$(O):STEPS:_CALC") {
    field(SCAN, "1 second")
    field(INPA, "$(P)$(M).MRES")
    field(CALC, "1/A")
    field(OUT, "$(P)$(O):STEPS PP")
    field(EGU, "mm")
}

record(ai, "$(P)$(O):STEPS") {
    field(DESC, "Motor steps per mm")
    field(EGU, "1/mm")
    field(PREC, "0")
}

# Thread

record(stringin, "$(P)$(O):THREAD") {
    field(DESC, "Thread col program will run on")
    field(VAL, "2")
    info(autosaveFields, "VAL")
}
alias("$(P)$(O):THREAD", "$(P)$(O):THREAD:SP")
alias("$(P)$(O):THREAD", "$(P)$(O):THREAD:SP:RBV")

# Swept angle

record(ao, "$(P)$(O):ANGLE:SP") {
    field(DESC, "Swept angle setpoint")
    field(EGU, "deg")
    field(PREC, "2")
    field(DRVH, "2")
    field(DRVL, "0")
    field(DTYP,"$(OTYP)")
    field(OUT, "@asyn(Galil,0)USER_VAR angle")
    info(INTEREST, "MEDIUM")
    info(archive, "VAL")
    info(autosaveFields, "VAL")
    field(FLNK, "$(P)$(O):ANGLE:SP:_FAN")
}

record(fanout, "$(P)$(O):ANGLE:SP:_FAN") {
    
    field(LNK1, "$(P)$(O):FREQ:SP PP")  # It only makes sense to set angle and freq "together".
    field(LNK2, "$(P)$(O):DIST:PART:SP PP")
}

record(ai,"$(P)$(O):ANGLE:SP:RBV") {
    field(DESC, "Swept angle setpoint readback")
    field(SCAN, "1 second")
    field(DTYP, "$(OTYP)")
    field(EGU, "deg")
    field(PREC, "2")
    field(INP, "@asyn(Galil,0)USER_VAR angle")
}

record(calc, "$(P)$(O):DIST:PART:SP") {
    field(DESC, "Swept distance, setpoint")
    field(INPA, "$(P)$(O):RADIUS")  # Constant.
    field(INPB, "$(P)$(O):STEPS")  # Constant.
    field(INPC, "$(P)$(O):ANGLE:SP")
    field(CALC, "2*A*B*TAN(C*D2R)")
    field(EGU, "stp")
    field(PREC, "0")
    field(FLNK, "$(P)$(O):VEL:SP:DISC")
}

record(calc, "$(P)$(O):CYCLE:TIME:HALF:SP") {
    field(DESC, "Half cycle time, setpoint")
    field(INPA, "$(P)$(O):FREQ:SP")
    field(CALC, "1/(2*A)")
    field(EGU, "s")
    field(PREC, "2")
    field(FLNK, "$(P)$(O):VEL:SP:DISC")
}

record(calc, "$(P)$(O):VEL:SP:DISC") {
    field(DESC, "Velocity calculation discriminant")
    field(INPA, "$(P)$(O):ACC:SP")  # Constant.
    field(INPB, "$(P)$(O):DIST:PART:SP")
    field(INPC, "$(P)$(O):CYCLE:TIME:HALF:SP")
    field(CALC, "C*C-8*B/A")
    field(EGU, "s^2")
    field(PREC, "2")
    field(FLNK, "$(P)$(O):VEL:SP:_FANOUT")
}

record(fanout, "$(P)$(O):VEL:SP:_FANOUT") {
    field(LNK1, "$(P)$(O):VEL:SP:DISC:CHECK")
    field(LNK2, "$(P)$(O):VEL:SP:_CALC")
}

record(calc, "$(P)$(O):VEL:SP:DISC:CHECK") {
    field(DESC, "0 if discriminant valid, else 1")
    field(INPA, "$(P)$(O):VEL:SP:DISC")
    field(CALC, "A<0")
    field(EGU, "")
    field(PREC, "0")
    info(autosaveFields, "VAL")
}

record(calcout, "$(P)$(O):VEL:SP:_CALC") {
    field(INPA, "$(P)$(O):ACC:SP")  # Constant.
    field(INPB, "$(P)$(O):DIST:PART:SP")
    field(INPC, "$(P)$(O):CYCLE:TIME:HALF:SP")
    field(INPD, "$(P)$(O):VEL:SP:DISC")
    field(CALC, "A*(C-SQR(D))/4")
    field(OUT, "$(P)$(O):VEL:SP PP")
    field(EGU, "stp/s")
    field(PREC, "0")
}

record(calc, "$(P)$(O):TIME:ACC:SP") {
    field(DESC, "Acceleration time setpoint")
    field(INPA, "$(P)$(O):ACC:SP")
    field(INPB, "$(P)$(O):VEL:SP")
    field(CALC, "B/A")
    field(EGU, "s")
    field(PREC, "2")
}

record(calc, "$(P)$(O):TIME:VEL:SP") {
    field(DESC, "Time to velocity setpoint")
    field(INPA, "$(P)$(O):DIST:PART:SP CP MS")
    field(INPB, "$(P)$(O):VEL:SP CP MS")
    field(CALC, "A/B")
    field(EGU, "s")
    field(PREC, "2")
}

record(calc, "$(P)$(O):TIME:TOTAL:SP") {
    field(DESC, "Total time setpoint")
    field(INPA, "$(P)$(O):TIME:ACC:SP CP MS")
    field(INPB, "$(P)$(O):TIME:VEL:SP CP MS")
    field(CALC, "2*A+B")
    field(EGU, "s")
    field(PREC, "2")
}

record(calc, "$(P)$(O):DIST:VEL:SP") {
    field(DESC, "Distance to velocity setpoint")
    field(INPA, "$(P)$(O):ACC:SP CP MS")
    field(INPB, "$(P)$(O):VEL:SP CP MS")
    field(CALC, "B*B/(2*A)")
    field(EGU, "stp")
    field(PREC, "2")
}

record(calcout, "$(P)$(O):DIST:SP:_CALC") {
    field(INPA, "$(P)$(O):DIST:VEL:SP")
    field(INPB, "$(P)$(O):DIST:PART:SP")
    field(CALC, "2*A+B")
    field(OUT, "$(P)$(O):DIST:SP PP")
    field(EGU, "stp")
    field(PREC, "2")
}

# Calculate the actual swept distance

record(calc, "$(P)$(O):DIST:VEL") {
    field(DESC, "Actual distance to velocity")
    field(EGU, "stp")
    field(PREC, "0")
    field(INPA, "$(P)$(O):ACC CP MS")
    field(INPB, "$(P)$(O):VEL CP MS")
    field(CALC, "B*B/(2*A)")
}

record(calc, "$(P)$(O):DIST:PART") {
    field(DESC, "Actual swept distance")
    field(EGU, "stp")
    field(PREC, "0")
    field(INPA, "$(P)$(O):DIST CP MS")
    field(INPB, "$(P)$(O):DIST:VEL CP MS")
    field(CALC, "A-2*B")
}

record(calc, "$(P)$(O):ANGLE") {
    field(DESC, "Actual swept angle")
    field(EGU, "deg")
    field(PREC, "2")
    field(INPA, "$(P)$(O):DIST:PART CP MS")
    field(INPB, "$(P)$(O):RADIUS CP MS")
    field(INPC, "$(P)$(O):STEPS CP MS")
    field(CALC, "R2D*ATAN(A/(2*B*C))")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
    field(ASG, "READONLY")
}

record(calc, "$(P)$(O):CYCLE:TIME:HALF") {
    field(DESC, "Actual half cycle time")
    field(EGU, "s")
    field(PREC, "2")
    field(INPA, "$(P)$(O):ACC CP MS")
    field(INPB, "$(P)$(O):VEL CP MS")
    field(INPC, "$(P)$(O):DIST:PART CP MS")
    field(CALC, "2*B/A+C/B")
}

record(calc, "$(P)$(O):FREQ:SP:RBV") {
    field(DESC, "Expected operating frequency")
    field(EGU, "Hz")
    field(PREC, "2")
    field(INPA, "$(P)$(O):CYCLE:TIME:HALF CP MS")
    field(CALC, "1/(2*A)")
}

# The fields set by the calculations

record(ao,"$(P)$(O):VEL:SP") {
    field(DESC, "Velocity setpoint")
    field(DTYP, "$(OTYP)")
    field(EGU, "stp/s")
    field(PREC, "2")
    field(OUT, "@asyn(Galil,0)USER_VAR vel")
    info(archive, "VAL")
    info(autosaveFields, "VAL")
}

record(ao,"$(P)$(O):ACC:SP") {
    field(DESC, "Acceleration setpoint")
    field(VAL, "49152")
    field(PINI, "YES")
    field(DTYP, "$(OTYP)")
    field(EGU, "stp/s^2")
    field(PREC, "2")
    field(OUT, "@asyn(Galil,0)USER_VAR accel")
    info(archive, "VAL")
}

record(ao,"$(P)$(O):DIST:SP") {
    field(DESC, "Total swept distance setpoint")
    field(DTYP, "$(OTYP)")
    field(EGU, "stp")
    field(PREC, "2")
    field(OUT, "@asyn(Galil,0)USER_VAR dist")
    info(archive, "VAL")
    info(autosaveFields, "VAL")
}

# Recover the variables set in the Galil

record(ai,"$(P)$(O):VEL") {
    field(DESC,"Velocity")
    field(SCAN,".1 second")
    field(DTYP,"$(OTYP)")
    field(INP, "@asyn(Galil,0)USER_VAR vel")
    field(EGU, "stp/s")
    field(PREC, "2")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(ai,"$(P)$(O):ACC") {
    field(DESC,"Acceleration")
    field(SCAN,".1 second")
    field(DTYP,"$(OTYP)")
    field(INP, "@asyn(Galil,0)USER_VAR accel")
    field(EGU, "stp/s^2")
    field(PREC, "2")
    info(INTEREST, "HIGH")
}

record(ai,"$(P)$(O):DIST") {
    field(DESC, "Total swept distance")
    field(SCAN, ".1 second")
    field(DTYP, "$(OTYP)")
    field(INP, "@asyn(Galil,0)USER_VAR dist")
    field(EGU, "stp")
    field(PREC, "2")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}
