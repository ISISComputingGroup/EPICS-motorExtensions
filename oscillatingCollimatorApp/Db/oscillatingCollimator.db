# (LET) Radial oscillating collimator

# Start/stop

record(bo, "$(P)$(O):START:SP") {
    field(DESC, "Start the code execution")
    field(FLNK, "$(P)$(O):START:SEQ")
}

record(seq, "$(P)$(O):START:SEQ") {
	field(DO1, "1")
	field(LNK1, "$(P)$(O):AXIS:CMD.PROC")
	
	field(DO2, "1")
	field(LNK2, "$(P)$(O):START:CMD.PROC")
	field(DLY2, "3.0")
	
	field(SELM, "All")
}

record(mbbi, "$(P)$(O):AXIS") {
    field(DESC, "Alphabetic representation of motor")
	field(VAL, "$(AXIS)")
	field(PINI, "YES")
	field(ONST, "A")
	field(TWST, "B")
	field(THST, "C")
	field(FRST, "D")
	field(FVST, "E")
}

record(scalcout, "$(P)$(O):AXIS:CMD") {
	field(DESC, "Set axis in GMC")
	field(INAA, "$(P)$(O):AXIS")
	field(BB, "~a=\"")
	field(CC, "\"")
	field(CALC, "BB+AA+CC")
	field(OUT, "$(P)$(D):SEND_STR_CMD PP")
}

record(scalcout, "$(P)$(O):START:CMD") {
    field(DESC, "Galil command to start col program")
	field(INAA, "$(P)$(O):THREAD")
	field(BB, "XQ #HOMER,")
	field(CALC, "BB+AA")
	field(OUT, "$(P)$(D):SEND_STR_CMD PP")
}

record(bo, "$(P)$(O):STOP:SP") {
    field(DESC, "Stop the code execution")
    field(FLNK, "$(P)$(O):STOP:SEQ")
}

record(seq, "$(P)$(O):STOP:SEQ") {
	field(DO1, "0.5")
	field(LNK1, "$(P)$(O):HALT:CMD.PROC")
	field(DLY1, "1")
	
	field(DO2, "1")
	field(LNK2, "$(P)$(O):STOP:CMD.PROC")
	field(DLY2, "1")
	
	field(SELM, "All")
}

record(scalcout, "$(P)$(O):HALT:CMD") {
    field(DESC, "Halt the col thread")
	field(INAA, "$(P)$(O):THREAD")
	field(BB, "HX ")
	field(CALC, "BB+AA")
	field(OUT, "$(P)$(D):SEND_STR_CMD PP")
}

record(scalcout, "$(P)$(O):STOP:CMD") {
    field(DESC, "Stop the motor")
	field(BB, "ST")
	field(CALC, "BB")
	field(OUT, "$(P)$(D):SEND_STR_CMD PP")
}

# Motor position

record(calcout, "$(P)$(O):POS:_CALC") {
	field(INPA, "$(P)$(M).RBV CP")
	field(INPB, "$(P)$(O):RADIUS:SP:RBV")
	field(CALC, "R2D*ATAN(A/B)")
	field(OUT, "$(P)$(O):POS PP")	
	field(OOPT, "Every Time")
}

record(ai, "$(P)$(O):POS") {
    field(DESC, "Current motor position")
    field(PREC, "2")
    field(EGU, "deg")
    info(INTEREST, "MEDIUM")
}

# Operating mode

record(ai, "$(P)$(O):MODE:_READ") {
	field(SCAN,"1 second")
	field(DTYP,"asynFloat64")
	field(EGU, "")
	field(FLNK,"$(P)$(O):MODE")
	field(INP, "@asyn(Galil,0)USER_VAR mode")
}

record(mbbi, "$(P)$(O):MODE") {
	field(DESC,"Control mode")
	field(INP, "$(P)$(O):MODE:_READ")
	field(ZRST, "Initializing")
	field(ONST, "Homing")
	field(TWST, "Oscillating")
    info(INTEREST, "HIGH")
	info(archive, "VAL")
}

# Frequency

record(ao, "$(P)$(O):FREQ:SP") {
    field(DESC, "Operating frequency setpoint")
    field(PREC, "2")
    field(EGU, "Hz")
	field(DRVH, "0.5")
	field(DRVL, "0")	
	field(FLNK, "$(P)$(O):ANGLE:_TRIG")
    info(INTEREST, "MEDIUM")
	info(archive, "VAL")
    info(autosaveFields, "VAL")
}

record(ai,"$(P)$(O):TIME") {
	field(DESC,"Time between oscillations")
	field(SCAN,"1 second")
    field(EGU, "ms")
	field(DTYP,"asynFloat64")
	field(INP, "@asyn(Galil,0)USER_VAR time")
	field(FLNK, "$(P)$(O):FREQ:_CALC")
    info(INTEREST, "MEDIUM")
	info(archive, "VAL")
}

record(calcout, "$(P)$(O):FREQ:_CALC") {
    field(PREC, "2")
    field(EGU, "Hz")
    field(INPA, "$(P)$(O):TIME")
	field(CALC, "1000/A")
	field(OUT, "$(P)$(O):FREQ PP")
}

record(ai, "$(P)$(O):FREQ") {
    field(DESC, "Operating frequency")
    field(PREC, "2")
    field(EGU, "Hz")
    info(INTEREST, "HIGH")
	info(archive, "VAL")
}

# Cycle

record(ai,"$(P)$(O):CYCLE") {
	field(DESC,"Motor count")
	field(SCAN,"1 second")
	field(DTYP,"asynFloat64")
	field(INP, "@asyn(Galil,0)USER_VAR count")
    field(EGU, "")
    field(PREC, "0")
    info(INTEREST, "HIGH")
	info(archive, "VAL")
}

# Mounting radius

record(ao, "$(P)$(O):RADIUS:SP") {
    # This doesn't need to be stored on the device, but it is useful
	# to retain the value on the hardware in case the IOC restarts
    field(DESC, "Mounting radius setpoint")
	field(DTYP, "asynFloat64")	
    field(EGU, "mm")
    field(PREC, "2")
	field(DRVL, "0")
	field(DRVH, "Inf")
	field(OUT, "@asyn(Galil,0)USER_VAR radius")
	field(FLNK, "$(P)$(O):ANGLE:_TRIG")
    info(INTEREST, "MEDIUM")
	info(archive, "VAL")
    info(autosaveFields, "VAL")
}

record(ai,"$(P)$(O):RADIUS") {
    field(DESC, "Mounting radius")
	field(SCAN,"1 second")
	field(DTYP,"asynFloat64")	
    field(EGU, "mm")
    field(PREC, "2")
	field(INP, "@asyn(Galil,0)USER_VAR radius")
    info(INTEREST, "HIGH")
	info(archive, "VAL")
}
alias("$(P)$(O):RADIUS", "$(P)$(O):RADIUS:SP:RBV")

# Motor steps

record(calcout, "$(P)$(O):STEPS:_CALC") {
	field(SCAN, "1 second")
	field(INPA, "$(P)$(M).MRES")
	field(CALC, "1/A")
	field(OUT, "$(P)$(O):STEPS PP")
	field(EGU, "mm")
}

record(ai, "$(P)$(O):STEPS") {
	field(DESC, "Motor steps per mm")
    field(EGU, "1/mm")
    field(PREC, "0")
}

# Thread

record(stringin, "$(P)$(O):THREAD") {
    field(DESC, "Thread col program will run on")
    field(VAL, "2")
    info(autosaveFields, "VAL")
}
alias("$(P)$(O):THREAD", "$(P)$(O):THREAD:SP")
alias("$(P)$(O):THREAD", "$(P)$(O):THREAD:SP:RBV")

# Swept angle

record(ao, "$(P)$(O):ANGLE:SP") {
    field(DESC, "Swept angle setpoint")
    field(EGU, "deg")
    field(PREC, "2")
	field(DRVH, "2")
	field(DRVL, "0")
	field(DTYP,"asynFloat64")	
	field(OUT, "@asyn(Galil,0)USER_VAR angle")
	field(FLNK, "$(P)$(O):ANGLE:_TRIG")
    info(INTEREST, "MEDIUM")
	info(archive, "VAL")
    info(autosaveFields, "VAL")
}

record(ai,"$(P)$(O):ANGLE:SP:RBV") {
    field(DESC, "Swept angle setpoint readback")
	field(SCAN,"1 second")
	field(DTYP,"asynFloat64")	
    field(EGU, "deg")
    field(PREC, "2")
	field(INP, "@asyn(Galil,0)USER_VAR angle")
}

record(fanout, "$(P)$(O):ANGLE:_TRIG") {
	field(LNK1, "$(P)$(O):DIST:PART:SP")
}

record(calc, "$(P)$(O):DIST:PART:SP") {
    field(DESC, "Swept distance, setpoint")
	field(INPA, "$(P)$(O):RADIUS:SP")
	field(INPB, "$(P)$(O):STEPS")
	field(INPC, "$(P)$(O):ANGLE:SP")
	field(CALC, "2*A*B*TAN(C*D2R)")
    field(EGU, "stp")
    field(PREC, "0")
	field(FLNK, "$(P)$(O):CYCLE:TIME:HALF:SP")
}

record(calc, "$(P)$(O):CYCLE:TIME:HALF:SP") {
    field(DESC, "Half cycle time, setpoint")
	field(INPA, "$(P)$(O):FREQ:SP")
	field(CALC, "1/(2*A)")
    field(EGU, "s")
    field(PREC, "2")
	field(FLNK, "$(P)$(O):ACC:SP:_CALC")
}

record(calcout, "$(P)$(O):ACC:SP:_CALC") {
    field(EGU, "stp/s^2")
    field(PREC, "0")
	field(CALC, "49152")
	field(OUT, "$(P)$(O):ACC:SP PP")
	field(FLNK, "$(P)$(O):VEL:SP:DISC")
}

record(calc, "$(P)$(O):VEL:SP:DISC") {
    field(DESC, "Velocity calculation discriminant")
	field(INPA, "$(P)$(O):ACC:SP")
	field(INPB, "$(P)$(O):DIST:PART:SP")
	field(INPC, "$(P)$(O):CYCLE:TIME:HALF:SP")
	field(CALC, "C*C-8*B/A")
    field(EGU, "s^2")
    field(PREC, "2")
	field(FLNK, "$(P)$(O):VEL:SP:DISC:CHECK")
}

record(calc, "$(P)$(O):VEL:SP:DISC:CHECK") {
    field(DESC, "0 if discriminant valid, else 1")
	field(INPA, "$(P)$(O):VEL:SP:DISC")
	field(CALC, "A<0")
    field(EGU, "")
    field(PREC, "0")
	field(FLNK, "$(P)$(O):VEL:SP:_CALC")
}

record(calcout, "$(P)$(O):VEL:SP:_CALC") {
	field(INPA, "$(P)$(O):ACC:SP")
	field(INPB, "$(P)$(O):DIST:PART:SP")
	field(INPC, "$(P)$(O):CYCLE:TIME:HALF:SP")
	field(INPD, "$(P)$(O):VEL:SP:DISC")
	field(CALC, "A*(C-SQR(D))/4")
	field(OUT, "$(P)$(O):VEL:SP PP")
    field(EGU, "stp/s")
    field(PREC, "0")
	field(FLNK, "$(P)$(O):TIME:ACC:SP")
}

record(calc, "$(P)$(O):TIME:ACC:SP") {
    field(DESC, "Acceleration time setpoint")
	field(INPA, "$(P)$(O):ACC:SP")
	field(INPB, "$(P)$(O):VEL:SP")
	field(CALC, "B/A")
    field(EGU, "s")
    field(PREC, "2")
	field(FLNK, "$(P)$(O):TIME:VEL:SP")
}

record(calc, "$(P)$(O):TIME:VEL:SP") {
    field(DESC, "Time to velocity setpoint")
	field(INPA, "$(P)$(O):DIST:PART:SP")
	field(INPB, "$(P)$(O):VEL:SP")
	field(CALC, "A/B")
    field(EGU, "s")
    field(PREC, "2")
	field(FLNK, "$(P)$(O):TIME:TOTAL:SP")
}

record(calc, "$(P)$(O):TIME:TOTAL:SP") {
    field(DESC, "Total time setpoint")
	field(INPA, "$(P)$(O):TIME:ACC:SP")
	field(INPB, "$(P)$(O):TIME:VEL:SP")
	field(CALC, "2*A+B")
    field(EGU, "s")
    field(PREC, "2")
	field(FLNK, "$(P)$(O):DIST:VEL:SP")
}

record(calc, "$(P)$(O):DIST:VEL:SP") {
    field(DESC, "Distance to velocity setpoint")
	field(INPA, "$(P)$(O):ACC:SP")
	field(INPB, "$(P)$(O):VEL:SP")
	field(CALC, "B*B/(2*A)")
    field(EGU, "stp")
    field(PREC, "2")
	field(FLNK, "$(P)$(O):DIST:SP:_CALC")
}

record(calcout, "$(P)$(O):DIST:SP:_CALC") {
	field(INPA, "$(P)$(O):DIST:VEL:SP")
	field(INPB, "$(P)$(O):DIST:PART:SP")
	field(CALC, "2*A+B")
	field(OUT, "$(P)$(O):DIST:SP PP")
    field(EGU, "stp")
    field(PREC, "2")
}
	
# Calculate the actual swept distance

record(fanout, "$(P)$(O):ANGLE:INV:_TRIG") {
	field(SCAN, "1 second")
	field(LNK1, "$(P)$(O):DIST:VEL")
}

record(calc, "$(P)$(O):DIST:VEL") {
    field(DESC, "Actual distance to velocity")
    field(EGU, "stp")
    field(PREC, "0")
	field(INPA, "$(P)$(O):ACC")
	field(INPB, "$(P)$(O):VEL")
	field(CALC, "B*B/(2*A)")
	field(FLNK, "$(P)$(O):DIST:PART")
}

record(calc, "$(P)$(O):DIST:PART") {
    field(DESC, "Actual swept distance")
    field(EGU, "stp")
    field(PREC, "0")
	field(INPA, "$(P)$(O):DIST")
	field(INPB, "$(P)$(O):DIST:VEL")
	field(CALC, "A-2*B")
	field(FLNK, "$(P)$(O):ANGLE")
}

record(calc, "$(P)$(O):ANGLE") {
    field(DESC, "Actual swept angle")
    field(EGU, "deg")
    field(PREC, "2")
	field(INPA, "$(P)$(O):DIST:PART")
	field(INPB, "$(P)$(O):RADIUS")
	field(INPC, "$(P)$(O):STEPS")
	field(CALC, "R2D*ATAN(A/(2*B*C))")
	field(FLNK, "$(P)$(O):CYCLE:TIME:HALF")
    info(INTEREST, "HIGH")
	info(archive, "VAL")
    field(ASG, "READONLY")
}

record(calc, "$(P)$(O):CYCLE:TIME:HALF") {
    field(DESC, "Actual half cycle time")
    field(EGU, "s")
    field(PREC, "2")
	field(INPA, "$(P)$(O):ACC")
	field(INPB, "$(P)$(O):VEL")
	field(INPC, "$(P)$(O):DIST:PART")
	field(CALC, "2*B/A+C/B")
	field(FLNK, "$(P)$(O):FREQ:SP:RBV")
}

record(calc, "$(P)$(O):FREQ:SP:RBV") {
    field(DESC, "Expected operating frequency")
    field(EGU, "Hz")
    field(PREC, "2")
	field(INPA, "$(P)$(O):CYCLE:TIME:HALF")
	field(CALC, "1/(2*A)")
}

# The fields set by the calculations

record(ao,"$(P)$(O):VEL:SP") {
	field(DESC, "Velocity setpoint")
	field(DTYP, "asynFloat64")	
	field(EGU, "stp/s")
	field(PREC, "2")
	field(OUT, "@asyn(Galil,0)USER_VAR vel")
	info(archive, "VAL")
}

record(ao,"$(P)$(O):ACC:SP") {
	field(DESC, "Acceleration setpoint")
	field(VAL, "49152")
	field(DTYP, "asynFloat64")	
	field(EGU, "stp/s^2")
	field(PREC, "2")
	field(OUT, "@asyn(Galil,0)USER_VAR accel")
	info(archive, "VAL")
}

record(ao,"$(P)$(O):DIST:SP") {
	field(DESC, "Total swept distance setpoint")
	field(DTYP, "asynFloat64")	
	field(EGU, "stp")
	field(PREC, "2")
	field(OUT, "@asyn(Galil,0)USER_VAR dist")
	info(archive, "VAL")
}

# Recover the variables set in the Galil

record(ai,"$(P)$(O):VEL") {
	field(DESC,"Velocity")
	field(SCAN,"1 second")
	field(DTYP,"asynFloat64")
	field(INP, "@asyn(Galil,0)USER_VAR vel")
    field(EGU, "stp/s")
    field(PREC, "2")
    info(INTEREST, "HIGH")
	info(archive, "VAL")
}
	
record(ai,"$(P)$(O):ACC") {
	field(DESC,"Acceleration")
	field(SCAN,"1 second")
	field(DTYP,"asynFloat64")
	field(INP, "@asyn(Galil,0)USER_VAR accel")
    field(EGU, "stp/s^2")
    field(PREC, "2")
    info(INTEREST, "HIGH")
	info(archive, "VAL")
}
	
record(ai,"$(P)$(O):DIST") {
	field(DESC,"Total swept distance")
	field(SCAN,"1 second")
	field(DTYP,"asynFloat64")
	field(INP, "@asyn(Galil,0)USER_VAR dist")
    field(EGU, "stp")
    field(PREC, "2")
    info(INTEREST, "HIGH")
	info(archive, "VAL")
}
